{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Expandable"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ExpandableChildren"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ExpandableButton"}]},{"type":"text","value":" to show an initial subset of elements. The remaining will be hidden and can be expanded by the user."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"live-code","properties":{"code":"() => {\n  const colors = [ \"Red\", \"Orange\", \"Yellow\", \"Green\", \"Cyan\", \"Blue\", \"Indigo\", \"Violet\", \"Purple\", \"Magenta\", \"Pink\", \"Brown\", \"White\", \"Gray\", \"Black\"]\n  \n  return (\n    <div className=\"y-spacing\">\n      <Expandable>\n        <ExpandableButton name=\"colors\" count={colors.length} />\n\n        <ul>\n          <ExpandableChildren show={3}>\n            {colors.map((color, key) => <li key={key}>{color}</li>)}\n          </ExpandableChildren>\n        </ul>\n      </Expandable>\n    </div>\n  )\n}","compiled":"\"use strict\";\n\n(function () {\n  var colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Cyan\", \"Blue\", \"Indigo\", \"Violet\", \"Purple\", \"Magenta\", \"Pink\", \"Brown\", \"White\", \"Gray\", \"Black\"];\n\n  return React.createElement(\n    \"div\",\n    { className: \"y-spacing\" },\n    React.createElement(\n      Expandable,\n      null,\n      React.createElement(ExpandableButton, { name: \"colors\", count: colors.length }),\n      React.createElement(\n        \"ul\",\n        null,\n        React.createElement(\n          ExpandableChildren,\n          { show: 3 },\n          colors.map(function (color, key) {\n            return React.createElement(\n              \"li\",\n              { key: key },\n              color\n            );\n          })\n        )\n      )\n    )\n  );\n});"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tagName":"research-insight","properties":{},"children":[{"type":"text","value":"\n    Avoid generic labels. Users much prefered and could predict behavor when including the name and count when expanding abbreviated lists.\n  "}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"Expandable"},"fields":{"name":"expandable"}}},"pageContext":{"name":"expandable"}}